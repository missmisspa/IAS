-- MySQL Script generated by MySQL Workbench
-- Wed Feb 19 09:29:49 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema floweryflowers
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema floweryflowers
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `floweryflowers` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `floweryflowers` ;

-- -----------------------------------------------------
-- Table `floweryflowers`.`customers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`customers` ;

CREATE TABLE IF NOT EXISTS `floweryflowers`.`customers` (
  `customersID` INT NOT NULL AUTO_INCREMENT,
  `fname` VARCHAR(100) NOT NULL,
  `lname` VARCHAR(100) NOT NULL,
  `email` VARCHAR(100) NULL DEFAULT NULL,
  `phone` VARCHAR(11) NULL DEFAULT NULL,
  `address` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`customersID`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `floweryflowers`.`supplier`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`supplier` ;

CREATE TABLE IF NOT EXISTS `floweryflowers`.`supplier` (
  `supplierID` INT NOT NULL AUTO_INCREMENT,
  `supplierName` VARCHAR(100) NOT NULL,
  `email` VARCHAR(100) NULL DEFAULT NULL,
  `phone` VARCHAR(11) NULL DEFAULT NULL,
  PRIMARY KEY (`supplierID`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `floweryflowers`.`products`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`products` ;

CREATE TABLE IF NOT EXISTS `floweryflowers`.`products` (
  `productID` INT NOT NULL AUTO_INCREMENT,
  `productName` VARCHAR(100) NOT NULL,
  `price` DECIMAL(10,2) NOT NULL,
  `stock` INT NOT NULL,
  `supplierID` INT NULL DEFAULT NULL,
  PRIMARY KEY (`productID`),
  INDEX `supplierID_idx` (`supplierID` ASC) VISIBLE,
  CONSTRAINT `supplierID`
    FOREIGN KEY (`supplierID`)
    REFERENCES `floweryflowers`.`supplier` (`supplierID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `floweryflowers`.`inventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`inventory` ;

CREATE TABLE IF NOT EXISTS `floweryflowers`.`inventory` (
  `inventoryID` INT NOT NULL AUTO_INCREMENT,
  `productID` INT NOT NULL,
  `quantity` INT NOT NULL,
  `lastUpdated` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`inventoryID`),
  INDEX `productID` (`productID` ASC) VISIBLE,
  CONSTRAINT `inventory_ibfk_1`
    FOREIGN KEY (`productID`)
    REFERENCES `floweryflowers`.`products` (`productID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `floweryflowers`.`orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`orders` ;

CREATE TABLE IF NOT EXISTS `floweryflowers`.`orders` (
  `orderID` INT NOT NULL AUTO_INCREMENT,
  `customerID` INT NOT NULL,
  `orderDate` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `totalAmount` DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (`orderID`),
  INDEX `customerID_idx` (`customerID` ASC) VISIBLE,
  CONSTRAINT `customerID`
    FOREIGN KEY (`customerID`)
    REFERENCES `floweryflowers`.`customers` (`customersID`))
ENGINE = InnoDB
AUTO_INCREMENT = 31
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `floweryflowers`.`order_items`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`order_items` ;

CREATE TABLE IF NOT EXISTS `floweryflowers`.`order_items` (
  `orderItemID` INT NOT NULL AUTO_INCREMENT,
  `orderID` INT NOT NULL,
  `productID` INT NOT NULL,
  `quantity` INT NOT NULL,
  `subtotal` DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (`orderItemID`),
  INDEX `orderID_idx` (`orderID` ASC) VISIBLE,
  INDEX `productID_idx` (`productID` ASC) VISIBLE,
  CONSTRAINT `orderID`
    FOREIGN KEY (`orderID`)
    REFERENCES `floweryflowers`.`orders` (`orderID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `productID`
    FOREIGN KEY (`productID`)
    REFERENCES `floweryflowers`.`products` (`productID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 21
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `floweryflowers`.`payments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`payments` ;

CREATE TABLE IF NOT EXISTS `floweryflowers`.`payments` (
  `paymentID` INT NOT NULL AUTO_INCREMENT,
  `orderID` INT NOT NULL,
  `paymentDate` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `amountPaid` DECIMAL(10,2) NOT NULL,
  `paymentMethod` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`paymentID`),
  INDEX `orderID` (`orderID` ASC) VISIBLE,
  CONSTRAINT `payments_ibfk_1`
    FOREIGN KEY (`orderID`)
    REFERENCES `floweryflowers`.`orders` (`orderID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 41
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `floweryflowers` ;

-- -----------------------------------------------------
-- Placeholder table for view `floweryflowers`.`customerorderview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `floweryflowers`.`customerorderview` (`fname` INT, `lname` INT, `orderDate` INT, `TotalAmount` INT);

-- -----------------------------------------------------
-- Placeholder table for view `floweryflowers`.`customeroverview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `floweryflowers`.`customeroverview` (`fname` INT, `lname` INT, `email` INT, `phone` INT);

-- -----------------------------------------------------
-- Placeholder table for view `floweryflowers`.`productinventory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `floweryflowers`.`productinventory` (`productID` INT, `productName` INT, `quantity` INT, `price` INT);

-- -----------------------------------------------------
-- Placeholder table for view `floweryflowers`.`productprice`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `floweryflowers`.`productprice` (`productID` INT, `productName` INT, `price` INT);

-- -----------------------------------------------------
-- Placeholder table for view `floweryflowers`.`supplierproduct`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `floweryflowers`.`supplierproduct` (`supplierName` INT, `productID` INT, `productName` INT);

-- -----------------------------------------------------
-- procedure IncreaseProductPrice
-- -----------------------------------------------------

USE `floweryflowers`;
DROP procedure IF EXISTS `floweryflowers`.`IncreaseProductPrice`;

DELIMITER $$
USE `floweryflowers`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `IncreaseProductPrice`()
BEGIN
    UPDATE products
    SET price = price * 1.10
    WHERE productID > 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateFlowerPrice
-- -----------------------------------------------------

USE `floweryflowers`;
DROP procedure IF EXISTS `floweryflowers`.`UpdateFlowerPrice`;

DELIMITER $$
USE `floweryflowers`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateFlowerPrice`(IN p_productID INT, IN p_newPrice DECIMAL(10,2))
BEGIN
    -- Declare the cursor to fetch product details based on the given productID
    DECLARE done INT DEFAULT 0;
    DECLARE currentProductID INT;
    DECLARE currentPrice DECIMAL(10,2);

    -- Declare the cursor for the products table based on productID
    DECLARE product_cursor CURSOR FOR 
        SELECT productID, price
        FROM products
        WHERE productID = p_productID;
    
    -- Declare the handler for the cursor when it reaches the end
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    
    -- Open the cursor
    OPEN product_cursor;
    
    -- Loop through the cursor and perform the update
    read_loop: LOOP
        FETCH product_cursor INTO currentProductID, currentPrice;
        
        -- If there are no more records, exit the loop
        IF done THEN
            LEAVE read_loop;
        END IF;
        
        -- Update the price of the current product
        UPDATE products
        SET price = p_newPrice
        WHERE productID = currentProductID;
        
    END LOOP;
    
    -- Close the cursor after completing the loop
    CLOSE product_cursor;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdatePaymentMethod
-- -----------------------------------------------------

USE `floweryflowers`;
DROP procedure IF EXISTS `floweryflowers`.`UpdatePaymentMethod`;

DELIMITER $$
USE `floweryflowers`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdatePaymentMethod`(IN p_orderID INT, IN p_newPaymentMethod VARCHAR(50))
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE currentPaymentID INT;
    DECLARE currentOrderID INT;
    DECLARE currentPaymentMethod VARCHAR(50);

    DECLARE payment_cursor CURSOR FOR 
        SELECT paymentID, orderID, paymentMethod
        FROM payments
        WHERE orderID = p_orderID;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN payment_cursor;

    read_loop: LOOP
        FETCH payment_cursor INTO currentPaymentID, currentOrderID, currentPaymentMethod;

        IF done THEN
            LEAVE read_loop;
        END IF;

        UPDATE payments
        SET paymentMethod = p_newPaymentMethod
        WHERE paymentID = currentPaymentID;
        
    END LOOP;

    CLOSE payment_cursor;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateStock
-- -----------------------------------------------------

USE `floweryflowers`;
DROP procedure IF EXISTS `floweryflowers`.`UpdateStock`;

DELIMITER $$
USE `floweryflowers`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateStock`()
BEGIN
    UPDATE products
    SET stock = stock + 100
    WHERE productID > 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `floweryflowers`.`customerorderview`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`customerorderview`;
DROP VIEW IF EXISTS `floweryflowers`.`customerorderview` ;
USE `floweryflowers`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `floweryflowers`.`customerorderview` AS select `c`.`fname` AS `fname`,`c`.`lname` AS `lname`,`o`.`orderDate` AS `orderDate`,`o`.`totalAmount` AS `TotalAmount` from (`floweryflowers`.`customers` `c` join `floweryflowers`.`orders` `o` on((`c`.`customersID` = `o`.`customerID`)));

-- -----------------------------------------------------
-- View `floweryflowers`.`customeroverview`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`customeroverview`;
DROP VIEW IF EXISTS `floweryflowers`.`customeroverview` ;
USE `floweryflowers`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `floweryflowers`.`customeroverview` AS select `floweryflowers`.`customers`.`fname` AS `fname`,`floweryflowers`.`customers`.`lname` AS `lname`,`floweryflowers`.`customers`.`email` AS `email`,`floweryflowers`.`customers`.`phone` AS `phone` from `floweryflowers`.`customers`;

-- -----------------------------------------------------
-- View `floweryflowers`.`productinventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`productinventory`;
DROP VIEW IF EXISTS `floweryflowers`.`productinventory` ;
USE `floweryflowers`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `floweryflowers`.`productinventory` AS select `p`.`productID` AS `productID`,`p`.`productName` AS `productName`,`i`.`quantity` AS `quantity`,`p`.`price` AS `price` from (`floweryflowers`.`products` `p` join `floweryflowers`.`inventory` `i` on((`p`.`productID` = `i`.`productID`)));

-- -----------------------------------------------------
-- View `floweryflowers`.`productprice`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`productprice`;
DROP VIEW IF EXISTS `floweryflowers`.`productprice` ;
USE `floweryflowers`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `floweryflowers`.`productprice` AS select `floweryflowers`.`products`.`productID` AS `productID`,`floweryflowers`.`products`.`productName` AS `productName`,`floweryflowers`.`products`.`price` AS `price` from `floweryflowers`.`products`;

-- -----------------------------------------------------
-- View `floweryflowers`.`supplierproduct`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `floweryflowers`.`supplierproduct`;
DROP VIEW IF EXISTS `floweryflowers`.`supplierproduct` ;
USE `floweryflowers`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `floweryflowers`.`supplierproduct` AS select `s`.`supplierName` AS `supplierName`,`p`.`productID` AS `productID`,`p`.`productName` AS `productName` from (`floweryflowers`.`supplier` `s` join `floweryflowers`.`products` `p` on((`s`.`supplierID` = `p`.`supplierID`)));

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
